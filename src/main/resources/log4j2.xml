<?xml version="1.0" encoding="UTF-8"?>
<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出-->
<!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数-->
<configuration monitorinterval="5">
    <!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->

    <!--变量配置-->
    <properties>
        <!-- 格式化输出：%date表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度 %msg：日志消息，%n是换行符-->
        <!-- %logger{36} 表示 Logger 名字最长36个字符 -->
        <property name="LOG_PATTERN" value="%date{HH:mm:ss.SSS} [%thread] %-5level %logger{36}  - %msg%n">
            <!-- 定义日志存储的路径，不要配置相对路径 -->
            <property name="FILE_PATH" value="/service-logs">
                <!--项目名称-->
                <property name="FILE_NAME" value="log4j2">
                </property></property></property></properties>

    <appenders>

        <console name="Console" target="SYSTEM_OUT">
            <!--输出日志的格式-->
            <patternlayout pattern="${LOG_PATTERN}">
                <!--控制台只输出level及其以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
                <thresholdfilter level="info" onmatch="ACCEPT" onmismatch="DENY">
                </thresholdfilter></patternlayout></console>

        <!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，适合临时测试用-->
        <file name="Filelog" filename="${FILE_PATH}/test.log" append="false">
            <patternlayout pattern="${LOG_PATTERN}">
            </patternlayout></file>

        <!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
        <rollingfile name="RollingFileInfo" filename="${FILE_PATH}/${FILE_NAME}/info.log" filepattern="${FILE_PATH}/${FILE_NAME}-INFO-%d{yyyy-MM-dd}_%i.log.gz">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <thresholdfilter level="info" onmatch="ACCEPT" onmismatch="DENY">
                <patternlayout pattern="${LOG_PATTERN}">
                    <policies>
                        <!--interval属性用来指定多久滚动一次，默认是1 hour-->
                        <timebasedtriggeringpolicy interval="1">
                            <sizebasedtriggeringpolicy size="10MB">
                            </sizebasedtriggeringpolicy></timebasedtriggeringpolicy></policies>
                    <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件开始覆盖-->
                    <defaultrolloverstrategy max="15">
                    </defaultrolloverstrategy></patternlayout></thresholdfilter></rollingfile>

        <!-- 这个会打印出所有的warn及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
        <rollingfile name="RollingFileWarn" filename="${FILE_PATH}/${FILE_NAME}/warn.log" filepattern="${FILE_PATH}/${FILE_NAME}-WARN-%d{yyyy-MM-dd}_%i.log.gz">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <thresholdfilter level="warn" onmatch="ACCEPT" onmismatch="DENY">
                <patternlayout pattern="${LOG_PATTERN}">
                    <policies>
                        <!--interval属性用来指定多久滚动一次，默认是1 hour-->
                        <timebasedtriggeringpolicy interval="1">
                            <sizebasedtriggeringpolicy size="10MB">
                            </sizebasedtriggeringpolicy></timebasedtriggeringpolicy></policies>
                    <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件开始覆盖-->
                    <defaultrolloverstrategy max="15">
                    </defaultrolloverstrategy></patternlayout></thresholdfilter></rollingfile>

        <!-- 这个会打印出所有的error及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
        <rollingfile name="RollingFileError" filename="${FILE_PATH}/${FILE_NAME}/error.log" filepattern="${FILE_PATH}/${FILE_NAME}-ERROR-%d{yyyy-MM-dd}_%i.log.gz">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <thresholdfilter level="error" onmatch="ACCEPT" onmismatch="DENY">
                <patternlayout pattern="${LOG_PATTERN}">
                    <policies>
                        <!--interval属性用来指定多久滚动一次，默认是1 hour-->
                        <timebasedtriggeringpolicy interval="1">
                            <sizebasedtriggeringpolicy size="10MB">
                            </sizebasedtriggeringpolicy></timebasedtriggeringpolicy></policies>
                    <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件开始覆盖-->
                    <defaultrolloverstrategy max="15">
                    </defaultrolloverstrategy></patternlayout></thresholdfilter></rollingfile>

    </appenders>

    <!--Logger节点用来单独指定日志的形式，比如要为指定包下的class指定不同的日志级别等。-->
    <!--然后定义loggers，只有定义了logger并引入的appender，appender才会生效-->
    <loggers>

        <!--过滤掉spring和mybatis的一些无用的DEBUG信息-->
        <logger name="org.mybatis" level="info" additivity="false">
            <appenderref ref="Console">
            </appenderref></logger>
        <!--监控系统信息-->
        <!--若是additivity设为false，则 子Logger 只会在自己的appender里输出，而不会在 父Logger 的appender里输出。-->
        <logger name="org.springframework" level="info" additivity="false">
            <appenderref ref="Console">
            </appenderref></logger>

        <root level="info">
            <appender-ref ref="Console">
                <appender-ref ref="Filelog">
                    <appender-ref ref="RollingFileInfo">
                        <appender-ref ref="RollingFileWarn">
                            <appender-ref ref="RollingFileError">
                            </appender-ref></appender-ref></appender-ref></appender-ref></appender-ref></root>
    </loggers>
</configuration>